{"version":3,"sources":["logo.svg","helpers/wordFunctions.js","components/Word.js","components/Hangman.js","helpers/canvasFunctions.js","components/Letters.js","components/TopicButton.js","App.js","serviceWorker.js","redux.js","index.js"],"names":["module","exports","getAllIndexes","arr","val","i","indexes","length","push","Word","topic","setTopic","dispatch","useDispatch","randomWord","useSelector","storeState","gameOver","incorrectLetters","React","useState","inputLetters","setInputLetters","enteredLetter","setEnteredLetter","errorMsg","setErrorMsg","useEffect","axios","get","params","ml","then","response","console","log","data","filteredData","filter","datum","word","includes","max","chosenRandomWord","Math","round","random","type","payload","wordArrayed","split","forEach","letter","class","Button","variant","onClick","className","placeholder","onChange","event","target","value","required","input","alreadyInputtedCorrect","alreadyInputtedIncorrect","parseInt","isValidInput","showingWord","map","index","showCorrectLetter","join","Hangman","incorrectCounter","window","addEventListener","ctx","document","querySelector","getContext","lineWidth","strokeStyle","moveTo","lineTo","stroke","firstMark","secondMark","thirdMark","fourthMark","beginPath","arc","PI","fifthMark","sixthMark","seventhMark","eighthMark","ninthMark","id","Letters","TopicButton","topicName","setChosenTopic","variantName","App","gameWon","chosenTopic","Boolean","location","hostname","match","initialState","store","createStore","state","action","__REDUX_DEVTOOLS_EXTENSION__","Root","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e885172.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import { type } from \"os\";\n\nexport const isValidInput = (input, alreadyInputtedCorrect, alreadyInputtedIncorrect, setErrorMsg) => {\n    const potentialNum = parseInt(input);\n    // if (typeof potentialNum !== 'string') {\n    //     setErrorMsg('Please enter a letter🆎');\n    //     return false;\n    /*} else */ if (input.length > 1) {\n        setErrorMsg('Please enter a single letter🧐');\n        return false;\n    } else if (alreadyInputtedCorrect.includes(input)) {\n        setErrorMsg('You have already entered this letter😅');\n        return false;\n    } else if (alreadyInputtedIncorrect.includes(input)) {\n        setErrorMsg('You have already entered this letter😅');\n        return false;\n    } else {\n        return true;\n    }\n}\n\nexport const isLetterCorrect = (word, letter) => {\n    if (word.includes(letter)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport const showCorrectLetter = (word, letter, showingWord)  => {\n    let indexes = getAllIndexes(word.split(\"\"), letter);\n    indexes.map(index => {\n        showingWord[index] = letter\n    })\n    //console.log(showingWord, 'inputLetters now');\n    return showingWord;\n}\n\nexport const getAllIndexes = (arr, val) => {\n    var indexes = [], i;\n    for(i = 0; i < arr.length; i++)\n        if (arr[i] === val)\n            indexes.push(i);\n    return indexes;\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport Button from 'react-bootstrap/Button';\nimport {\n    isValidInput,\n    isLetterCorrect,\n    showCorrectLetter\n} from '..//helpers/wordFunctions';\n\nfunction Word({ topic, setTopic }) {\n    const dispatch = useDispatch();\n    const randomWord = useSelector(storeState => storeState.randomWord);\n    const gameOver = useSelector(storeState => storeState.gameOver); //use ternary to display randomWord when true\n    const incorrectLetters = useSelector(storeState => storeState.incorrectLetters);\n    const [inputLetters, setInputLetters] = React.useState(''); //displays the randomWord as _\n    const [enteredLetter, setEnteredLetter] = React.useState('');\n    const [errorMsg, setErrorMsg] = React.useState('');\n   \n    React.useEffect(() => {\n        if (randomWord === '') {\n            axios\n                .get(\n                    `https://api.datamuse.com/words`, {\n                        params: {\n                            ml: topic\n                        }\n                    }\n                )\n                .then(response => {\n                    console.log(response.data)\n                    let filteredData = response.data.filter(datum => !datum.word.includes(topic)); //console.log(response.data)\n                    let min = 0;\n                    let max = filteredData.length - 1;\n                    let randomNumber = Math.round(Math.random() * (max - min) + min);\n                    let chosenRandomWord = filteredData[randomNumber].word;\n                    console.log('random word: ', chosenRandomWord);\n                    dispatch({ type: \"SET_RANDOM_WORD\", payload: chosenRandomWord });\n                    let wordArrayed = [];\n                    chosenRandomWord.split(\"\").forEach(letter => {\n                        wordArrayed.push('_ ');\n                    }); \n                    setInputLetters(wordArrayed);\n                });\n        } \n    }, [randomWord])\n\n\n    if (gameOver) {\n        return (\n            <div class=\"text-center\">\n                <h3>GAME OVER</h3>\n                <h2>'{randomWord}'</h2>\n                <Button\n                    variant=\"success\"\n                    onClick={() => {\n                        setTopic('');\n                    }}\n                >Restart game</Button>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"App\">\n                <h2>{inputLetters}</h2>\n                <h4>Topic: {topic}</h4>\n                <br />\n                <label>Enter letter: </label>\n                <input \n                    type=\"text\" \n                    placeholder=\"e.g a\"\n                    onChange={(event) => {\n                        setEnteredLetter(event.target.value);\n                        setErrorMsg('');\n                    }}\n                    value={enteredLetter}\n                    required\n                />\n                <Button\n                    variant=\"outline-success\"\n                    onClick={() => {\n                        if (isValidInput(enteredLetter, inputLetters, incorrectLetters, setErrorMsg)) {\n                            if (isLetterCorrect(randomWord, enteredLetter)) {\n                                setInputLetters(showCorrectLetter(randomWord, enteredLetter, inputLetters));\n                            } else {\n                                dispatch({ type: \"ADD_INCORRECT_LETTER\", payload: enteredLetter });\n                                dispatch({ type: \"INCREMENT_INCORRECT_COUNTER\" });\n                            }\n                            if (inputLetters || inputLetters !== \"\") {\n                                console.log('inputLetters', inputLetters);\n                                if (inputLetters.join(\"\") === randomWord) {\n                                    dispatch({ type: \"TOGGLE_GAME_WON\", payload: true}); //console.log('youve won!');\n                                }\n                            } \n                        } else {\n                            console.log(errorMsg, 'errorMSG')\n                        }\n                        setEnteredLetter('');\n                    }}\n                >submit</Button>\n                <div>\n                    {\n                        (errorMsg !== '')\n                        ? <h4>{errorMsg}</h4>\n                        : null\n                    }\n                </div>\n            </div>\n        );\n    }               \n    \n}\n\nexport default Word;","import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    firstMark,\n    secondMark,\n    thirdMark,\n    fourthMark,\n    fifthMark,\n    sixthMark,\n    seventhMark,\n    eighthMark,\n    ninthMark\n} from '..//helpers/canvasFunctions';\n\nfunction Hangman() {\n    const dispatch = useDispatch();\n    const incorrectCounter = useSelector(storeState => storeState.incorrectCounter);\n\n    window.addEventListener(\"load\", () => {\n        const canvas = document.querySelector('#canvas'); \n        const ctx = canvas.getContext('2d');\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = '#003300';\n    })\n     \n    React.useEffect(() => {\n        const canvas = document.querySelector('#canvas');\n        const ctx = canvas.getContext('2d');\n        switch(incorrectCounter) {\n            case 1:\n                firstMark(ctx);\n                break;\n            case 2:\n                secondMark(ctx);\n                break;\n            case 3:\n                thirdMark(ctx);\n                break;\n            case 4:\n                fourthMark(ctx); \n                break;\n            case 5:\n                fifthMark(ctx); \n                break;  \n            case 6:\n                sixthMark(ctx); \n                break; \n            case 7:\n                seventhMark(ctx); \n                break;\n            case 8:\n                eighthMark(ctx);\n                break; \n            case 9:\n                ninthMark(ctx); \n                console.log('game over');\n                dispatch({ type: \"TOGGLE_GAME_OVER\", payload: true});\n                break;\n            default:\n                console.log('nothing');\n        }\n    }, [incorrectCounter])\n\n    \n    return (\n        <div className=\"App\">\n            <canvas id=\"canvas\" ></canvas>\n        </div>\n    );\n}\n\n\nexport default Hangman;","export const firstMark = (ctx) => {\n    ctx.moveTo(10,130);\n    ctx.lineTo(40,130);\n    ctx.stroke();\n}\n\nexport const secondMark = (ctx) => {\n    ctx.moveTo(25,40);\n    ctx.lineTo(25,130);\n    ctx.stroke();\n}\n\nexport const thirdMark = (ctx) => {\n     ctx.moveTo(25,40);\n     ctx.lineTo(60,40);\n     ctx.stroke();\n}\n\nexport const fourthMark = (ctx) => {\n    ctx.moveTo(60,40);\n    ctx.lineTo(60,50);\n    ctx.stroke();\n}\n\nexport const fifthMark = (ctx) => {\n    let centerX = 60;\n    let centerY = 60;\n    let radius = 10;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n    ctx.stroke();\n}\n\nexport const sixthMark = (ctx) => {\n    ctx.moveTo(60,70);\n    ctx.lineTo(60,100);\n    ctx.stroke();\n}\n\nexport const seventhMark = (ctx) => {\n    ctx.moveTo(45,85);\n    ctx.lineTo(75,85);\n    ctx.stroke();\n}\n\nexport const eighthMark = (ctx) => {\n    ctx.moveTo(60,100);\n    ctx.lineTo(50,120);\n    ctx.stroke();\n}\n\nexport const ninthMark = (ctx) => {\n    ctx.moveTo(60,100);\n    ctx.lineTo(70,120);\n    ctx.stroke();\n}","import React from 'react';\nimport { useSelector } from \"react-redux\";\n\n\nfunction Letters() {\n    const incorrectLetters = useSelector(storeState => storeState.incorrectLetters);\n\n    return (\n        <div className=\"App\">\n            <h4>incorrect letters entered:</h4>\n            <div>\n                {\n                    incorrectLetters.map(letter => <h4>{letter}</h4>)\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Letters;","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\n\nfunction TopicButton({ topicName, setChosenTopic, variantName }) {\n\n    return (\n        <div>\n           <Button\n                variant={variantName}\n                onClick={() => {\n                    setChosenTopic(topicName);\n                }}\n            >{topicName}</Button>\n\n        </div>\n    );\n}\n\nexport default TopicButton;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Word from './components/Word';\nimport Hangman from './components/Hangman';\nimport Letters from './components/Letters';\nimport TopicButton from './components/TopicButton'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const gameWon = useSelector(storeState => storeState.gameWon);\n  const [chosenTopic, setChosenTopic] = React.useState('');\n\n  return (\n    <div class=\"container text-center\">\n      <b><h1>Hangman</h1></b>\n\n      <div>\n        {\n          (chosenTopic !== '') \n          ?  \n            <>\n              <Word topic={chosenTopic} setTopic={setChosenTopic} />\n              <br />\n              <div>\n                {\n                  (gameWon)\n                  ? \n                    <div>\n                      <h2 class=\"text-center\">🔥🏆You've won!🏆🔥</h2>\n                      <Button\n                        variant=\"success\"\n                        onClick={() => {\n                          setChosenTopic('');\n                          dispatch({ type: \"TOGGLE_GAME_WON\", payload: false });\n                        }}\n                      >Restart game</Button>\n                    </div>\n                  : \n                    <div>\n                      <Hangman />\n                      <Letters />\n                    </div>\n                }\n              </div> \n            </>\n          : \n            <>\n              <h3>choose a topic!</h3>\n              <TopicButton topicName={'food'} setChosenTopic={setChosenTopic} variantName={'info'}/>\n              <TopicButton topicName={'animals'} setChosenTopic={setChosenTopic} variantName={'danger'}/>\n              <TopicButton topicName={'travel'} setChosenTopic={setChosenTopic} variantName={'warning'}/>\n            </> \n        }\n      </div>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const initialState = {\n  randomWord: '',\n  incorrectLetters: [],\n  incorrectCounter: 0,\n  gameWon: false,\n  gameOver: false\n};\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"SET_RANDOM_WORD\":\n          return {\n            ...state,\n            randomWord: action.payload \n          };\n        case \"ADD_INCORRECT_LETTER\":\n          return {\n            ...state,\n            incorrectLetters: [...state.incorrectLetters, action.payload]\n          };\n        case \"INCREMENT_INCORRECT_COUNTER\":\n          return {\n            ...state,\n            incorrectCounter: state.incorrectCounter + 1\n        }\n        case \"TOGGLE_GAME_WON\":\n          return {\n            ...state,\n            gameWon: action.payload\n        }\n        case \"TOGGLE_GAME_OVER\":\n          return {\n            ...state,\n            gameOver: action.payload\n        }\n        default:\n            return state;\n    }\n  };\n  \nexport const setRandomWord = word => {\n  return {\n    type: \"SET_RANDOM_WORD\",\n    payload: word\n  };\n};\n\nexport const addIncorrectLetter = letter => {\n  return {\n    type: \"ADD_INCORRECT_LETTER\",\n    payload: letter\n  };\n};\n\nexport const incrementIncorrectCounter = () => {\n  return {\n    type: \"INCREMENT_INCORRECT_COUNTER\"\n  };\n};\n\nexport const toggleGameWon = bool => {\n  return {\n    type: \"TOGGLE_GAME_WON\",\n    payload: bool\n  };\n};\n\nexport const toggleGameOver = bool => {\n  return {\n    type: \"TOGGLE_GAME_OVER\",\n    payload: bool\n  };\n};\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { reducer } from \"./redux\";\n\nconst store = createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n); \n\n\nfunction Root() {\n    return (\n      <Provider store={store}>\n        <App />\n      </Provider>\n    );\n}\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}