{"ast":null,"code":"import { type } from \"os\";\nexport const isValidInput = (input, alreadyInputtedCorrect, alreadyInputtedIncorrect, setErrorMsg) => {\n  const format = /[ !@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/;\n  const potentialNum = parseInt(input);\n\n  if (typeof potentialNum !== 'string') {\n    setErrorMsg('Please enter a letter🆎');\n    return false;\n  } else if (input.length > 1) {\n    setErrorMsg('Please enter a single letter🧐');\n    console.log(format.test(\"!\"), 'specChar check');\n    return false;\n  } else if (alreadyInputtedCorrect.includes(input)) {\n    setErrorMsg('You have already entered this letter😅');\n    return false;\n  } else if (alreadyInputtedIncorrect.includes(input)) {\n    setErrorMsg('You have already entered this letter😅');\n    return false;\n  } else {\n    return true;\n  }\n};\nexport const isLetterCorrect = (word, letter) => {\n  if (word.includes(letter)) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const showCorrectLetter = (word, letter, showingWord) => {\n  let indexes = getAllIndexes(word.split(\"\"), letter);\n  indexes.map(index => {\n    showingWord[index] = letter;\n  }); //console.log(showingWord, 'inputLetters now');\n\n  return showingWord;\n};\nexport const getAllIndexes = (arr, val) => {\n  var indexes = [],\n      i;\n\n  for (i = 0; i < arr.length; i++) if (arr[i] === val) indexes.push(i);\n\n  return indexes;\n};","map":{"version":3,"sources":["/Users/syedasultana/Desktop/FunProjects/hangman-game/src/helpers/wordFunctions.js"],"names":["type","isValidInput","input","alreadyInputtedCorrect","alreadyInputtedIncorrect","setErrorMsg","format","potentialNum","parseInt","length","console","log","test","includes","isLetterCorrect","word","letter","showCorrectLetter","showingWord","indexes","getAllIndexes","split","map","index","arr","val","i","push"],"mappings":"AAAA,SAASA,IAAT,QAAqB,IAArB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,sBAAR,EAAgCC,wBAAhC,EAA0DC,WAA1D,KAA0E;AAClG,QAAMC,MAAM,GAAG,wCAAf;AACA,QAAMC,YAAY,GAAGC,QAAQ,CAACN,KAAD,CAA7B;;AACA,MAAI,OAAOK,YAAP,KAAwB,QAA5B,EAAsC;AAClCF,IAAAA,WAAW,CAAC,yBAAD,CAAX;AACA,WAAO,KAAP;AACH,GAHD,MAGO,IAAIH,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AACzBJ,IAAAA,WAAW,CAAC,gCAAD,CAAX;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACM,IAAP,CAAY,GAAZ,CAAZ,EAA8B,gBAA9B;AACA,WAAO,KAAP;AACH,GAJM,MAIA,IAAIT,sBAAsB,CAACU,QAAvB,CAAgCX,KAAhC,CAAJ,EAA4C;AAC/CG,IAAAA,WAAW,CAAC,wCAAD,CAAX;AACA,WAAO,KAAP;AACH,GAHM,MAGA,IAAID,wBAAwB,CAACS,QAAzB,CAAkCX,KAAlC,CAAJ,EAA8C;AACjDG,IAAAA,WAAW,CAAC,wCAAD,CAAX;AACA,WAAO,KAAP;AACH,GAHM,MAGA;AACH,WAAO,IAAP;AACH;AACJ,CAnBM;AAqBP,OAAO,MAAMS,eAAe,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC7C,MAAID,IAAI,CAACF,QAAL,CAAcG,MAAd,CAAJ,EAA2B;AACvB,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ,CANM;AAQP,OAAO,MAAMC,iBAAiB,GAAG,CAACF,IAAD,EAAOC,MAAP,EAAeE,WAAf,KAAgC;AAC7D,MAAIC,OAAO,GAAGC,aAAa,CAACL,IAAI,CAACM,KAAL,CAAW,EAAX,CAAD,EAAiBL,MAAjB,CAA3B;AACAG,EAAAA,OAAO,CAACG,GAAR,CAAYC,KAAK,IAAI;AACjBL,IAAAA,WAAW,CAACK,KAAD,CAAX,GAAqBP,MAArB;AACH,GAFD,EAF6D,CAK7D;;AACA,SAAOE,WAAP;AACH,CAPM;AASP,OAAO,MAAME,aAAa,GAAG,CAACI,GAAD,EAAMC,GAAN,KAAc;AACvC,MAAIN,OAAO,GAAG,EAAd;AAAA,MAAkBO,CAAlB;;AACA,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGF,GAAG,CAACf,MAAnB,EAA2BiB,CAAC,EAA5B,EACI,IAAIF,GAAG,CAACE,CAAD,CAAH,KAAWD,GAAf,EACIN,OAAO,CAACQ,IAAR,CAAaD,CAAb;;AACR,SAAOP,OAAP;AACH,CANM","sourcesContent":["import { type } from \"os\";\n\nexport const isValidInput = (input, alreadyInputtedCorrect, alreadyInputtedIncorrect, setErrorMsg) => {\n    const format = /[ !@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/;\n    const potentialNum = parseInt(input);\n    if (typeof potentialNum !== 'string') {\n        setErrorMsg('Please enter a letter🆎');\n        return false;\n    } else if (input.length > 1) {\n        setErrorMsg('Please enter a single letter🧐');\n        console.log(format.test(\"!\"), 'specChar check')\n        return false;\n    } else if (alreadyInputtedCorrect.includes(input)) {\n        setErrorMsg('You have already entered this letter😅');\n        return false;\n    } else if (alreadyInputtedIncorrect.includes(input)) {\n        setErrorMsg('You have already entered this letter😅');\n        return false;\n    } else {\n        return true;\n    }\n}\n\nexport const isLetterCorrect = (word, letter) => {\n    if (word.includes(letter)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport const showCorrectLetter = (word, letter, showingWord)  => {\n    let indexes = getAllIndexes(word.split(\"\"), letter);\n    indexes.map(index => {\n        showingWord[index] = letter\n    })\n    //console.log(showingWord, 'inputLetters now');\n    return showingWord;\n}\n\nexport const getAllIndexes = (arr, val) => {\n    var indexes = [], i;\n    for(i = 0; i < arr.length; i++)\n        if (arr[i] === val)\n            indexes.push(i);\n    return indexes;\n}\n"]},"metadata":{},"sourceType":"module"}