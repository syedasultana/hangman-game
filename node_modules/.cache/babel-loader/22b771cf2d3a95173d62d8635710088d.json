{"ast":null,"code":"export const isValidInput = (input, alreadyInputtedCorrect, alreadyInputtedIncorrect, setErrorMsg) => {\n  //console.log(typeof input, 'typeof input')\n  console.log(parseInt(input), 'string parsed'); //console.log(isNaN(parseInt(input)), 'evaluating if number')\n  // if (typeof input !== 'string') {\n  //     //setErrorMsg('Please enter a letter');\n  //     return false;\n\n  /*} else */\n\n  if (input.length > 1) {\n    setErrorMsg('Please enter a single letter🧐');\n    return false;\n  } else if (alreadyInputtedCorrect.includes(input)) {\n    setErrorMsg('You have already entered this letter😅');\n    return false;\n  } else if (alreadyInputtedIncorrect.includes(input)) {\n    setErrorMsg('You have already entered this letter😅');\n    return false;\n  } else {\n    return true;\n  }\n};\nexport const isLetterCorrect = (word, letter) => {\n  if (word.includes(letter)) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const showCorrectLetter = (word, letter, showingWord) => {\n  let indexes = getAllIndexes(word.split(\"\"), letter);\n  indexes.map(index => {\n    showingWord[index] = letter;\n  }); //console.log(showingWord, 'inputLetters now');\n\n  return showingWord;\n};\nexport const getAllIndexes = (arr, val) => {\n  var indexes = [],\n      i;\n\n  for (i = 0; i < arr.length; i++) if (arr[i] === val) indexes.push(i);\n\n  return indexes;\n};","map":{"version":3,"sources":["/Users/syedasultana/Desktop/FunProjects/hangman-game/src/helpers/wordFunctions.js"],"names":["isValidInput","input","alreadyInputtedCorrect","alreadyInputtedIncorrect","setErrorMsg","console","log","parseInt","length","includes","isLetterCorrect","word","letter","showCorrectLetter","showingWord","indexes","getAllIndexes","split","map","index","arr","val","i","push"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,CAACC,KAAD,EAAQC,sBAAR,EAAgCC,wBAAhC,EAA0DC,WAA1D,KAA0E;AAClG;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAACN,KAAD,CAApB,EAA6B,eAA7B,EAFkG,CAGlG;AACA;AACA;AACA;;AACA;;AAAW,MAAIA,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AAC7BJ,IAAAA,WAAW,CAAC,gCAAD,CAAX;AACA,WAAO,KAAP;AACH,GAHU,MAGJ,IAAIF,sBAAsB,CAACO,QAAvB,CAAgCR,KAAhC,CAAJ,EAA4C;AAC/CG,IAAAA,WAAW,CAAC,wCAAD,CAAX;AACA,WAAO,KAAP;AACH,GAHM,MAGA,IAAID,wBAAwB,CAACM,QAAzB,CAAkCR,KAAlC,CAAJ,EAA8C;AACjDG,IAAAA,WAAW,CAAC,wCAAD,CAAX;AACA,WAAO,KAAP;AACH,GAHM,MAGA;AACH,WAAO,IAAP;AACH;AACJ,CAnBM;AAqBP,OAAO,MAAMM,eAAe,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC7C,MAAID,IAAI,CAACF,QAAL,CAAcG,MAAd,CAAJ,EAA2B;AACvB,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ,CANM;AAQP,OAAO,MAAMC,iBAAiB,GAAG,CAACF,IAAD,EAAOC,MAAP,EAAeE,WAAf,KAAgC;AAC7D,MAAIC,OAAO,GAAGC,aAAa,CAACL,IAAI,CAACM,KAAL,CAAW,EAAX,CAAD,EAAiBL,MAAjB,CAA3B;AACAG,EAAAA,OAAO,CAACG,GAAR,CAAYC,KAAK,IAAI;AACjBL,IAAAA,WAAW,CAACK,KAAD,CAAX,GAAqBP,MAArB;AACH,GAFD,EAF6D,CAK7D;;AACA,SAAOE,WAAP;AACH,CAPM;AASP,OAAO,MAAME,aAAa,GAAG,CAACI,GAAD,EAAMC,GAAN,KAAc;AACvC,MAAIN,OAAO,GAAG,EAAd;AAAA,MAAkBO,CAAlB;;AACA,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGF,GAAG,CAACZ,MAAnB,EAA2Bc,CAAC,EAA5B,EACI,IAAIF,GAAG,CAACE,CAAD,CAAH,KAAWD,GAAf,EACIN,OAAO,CAACQ,IAAR,CAAaD,CAAb;;AACR,SAAOP,OAAP;AACH,CANM","sourcesContent":["export const isValidInput = (input, alreadyInputtedCorrect, alreadyInputtedIncorrect, setErrorMsg) => {\n    //console.log(typeof input, 'typeof input')\n    console.log(parseInt(input), 'string parsed');\n    //console.log(isNaN(parseInt(input)), 'evaluating if number')\n    // if (typeof input !== 'string') {\n    //     //setErrorMsg('Please enter a letter');\n    //     return false;\n    /*} else */if (input.length > 1) {\n        setErrorMsg('Please enter a single letter🧐');\n        return false;\n    } else if (alreadyInputtedCorrect.includes(input)) {\n        setErrorMsg('You have already entered this letter😅');\n        return false;\n    } else if (alreadyInputtedIncorrect.includes(input)) {\n        setErrorMsg('You have already entered this letter😅');\n        return false;\n    } else {\n        return true;\n    }\n}\n\nexport const isLetterCorrect = (word, letter) => {\n    if (word.includes(letter)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport const showCorrectLetter = (word, letter, showingWord)  => {\n    let indexes = getAllIndexes(word.split(\"\"), letter);\n    indexes.map(index => {\n        showingWord[index] = letter\n    })\n    //console.log(showingWord, 'inputLetters now');\n    return showingWord;\n}\n\nexport const getAllIndexes = (arr, val) => {\n    var indexes = [], i;\n    for(i = 0; i < arr.length; i++)\n        if (arr[i] === val)\n            indexes.push(i);\n    return indexes;\n}\n"]},"metadata":{},"sourceType":"module"}