{"ast":null,"code":"import _slicedToArray from \"/Users/syedasultana/Desktop/FunProjects/hangman-game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/syedasultana/Desktop/FunProjects/hangman-game/src/components/Word.js\";\nimport React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport Button from 'react-bootstrap/Button';\nimport { isValidInput, isLetterCorrect, showCorrectLetter, getAllIndexes } from '..//helpers/wordFunctions';\n\nfunction Word({\n  topic\n}) {\n  const dispatch = useDispatch();\n  const randomWord = useSelector(storeState => storeState.randomWord);\n  const gameOver = useSelector(storeState => storeState.gameOver); //use ternary to display randomWord when true\n\n  const incorrectLetters = useSelector(storeState => storeState.incorrectLetters);\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        inputLetters = _React$useState2[0],\n        setInputLetters = _React$useState2[1]; //displays the randomWord as _\n\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        enteredLetter = _React$useState4[0],\n        setEnteredLetter = _React$useState4[1];\n\n  const _React$useState5 = React.useState(''),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        errorMsg = _React$useState6[0],\n        setErrorMsg = _React$useState6[1];\n\n  React.useEffect(() => {\n    if (randomWord === '') {\n      axios.get(\"https://cors-anywhere.herokuapp.com/https://api.datamuse.com/words\", {\n        params: {\n          ml: topic\n        }\n      }).then(response => {\n        //console.log(response.data)\n        let filteredData = response.data.filter(datum => !datum.word.includes(topic));\n        let min = 0;\n        let max = filteredData.length - 1;\n        let randomNumber = Math.round(Math.random() * (max - min) + min);\n        let chosenRandomWord = filteredData[randomNumber].word;\n        console.log('random word: ', chosenRandomWord);\n        dispatch({\n          type: \"SET_RANDOM_WORD\",\n          payload: chosenRandomWord\n        });\n        let wordArrayed = [];\n        chosenRandomWord.split(\"\").forEach(letter => {\n          wordArrayed.push('_ ');\n        });\n        setInputLetters(wordArrayed);\n      });\n    }\n  }, [randomWord]);\n\n  if (gameOver) {\n    return React.createElement(\"div\", {\n      class: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"GAME OVER\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"'\", randomWord, \"'\"));\n  } else {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, inputLetters), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Topic: \", topic), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Enter letter: \"), React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"e.g a\",\n      onChange: event => {\n        setEnteredLetter(event.target.value);\n        setErrorMsg('');\n      },\n      value: enteredLetter,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"outline-success\",\n      onClick: () => {\n        if (isValidInput(enteredLetter, inputLetters, incorrectLetters, setErrorMsg)) {\n          console.log(enteredLetter, 'enteredLetter');\n          console.log(isLetterCorrect(randomWord, enteredLetter), 'isLetterCorrect');\n\n          if (isLetterCorrect(randomWord, enteredLetter)) {\n            setInputLetters(showCorrectLetter(randomWord, enteredLetter, inputLetters));\n          } else {\n            dispatch({\n              type: \"ADD_INCORRECT_LETTER\",\n              payload: enteredLetter\n            });\n            dispatch({\n              type: \"INCREMENT_INCORRECT_COUNTER\"\n            });\n          }\n\n          if (inputLetters.join(\"\") === randomWord) {\n            console.log('youve won!');\n            dispatch({\n              type: \"TOGGLE_GAME_WON\",\n              payload: true\n            });\n          }\n        } else {\n          console.log(errorMsg, 'errorMSG');\n        }\n\n        setEnteredLetter('');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"submit\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, errorMsg !== '' ? React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, errorMsg) : null));\n  }\n}\n\nexport default Word;","map":{"version":3,"sources":["/Users/syedasultana/Desktop/FunProjects/hangman-game/src/components/Word.js"],"names":["React","useDispatch","useSelector","axios","Button","isValidInput","isLetterCorrect","showCorrectLetter","getAllIndexes","Word","topic","dispatch","randomWord","storeState","gameOver","incorrectLetters","useState","inputLetters","setInputLetters","enteredLetter","setEnteredLetter","errorMsg","setErrorMsg","useEffect","get","params","ml","then","response","filteredData","data","filter","datum","word","includes","min","max","length","randomNumber","Math","round","random","chosenRandomWord","console","log","type","payload","wordArrayed","split","forEach","letter","push","event","target","value","join"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport Button from 'react-bootstrap/Button';\nimport {\n    isValidInput,\n    isLetterCorrect,\n    showCorrectLetter,\n    getAllIndexes\n} from '..//helpers/wordFunctions';\n\nfunction Word({ topic }) {\n    const dispatch = useDispatch();\n    const randomWord = useSelector(storeState => storeState.randomWord);\n    const gameOver = useSelector(storeState => storeState.gameOver); //use ternary to display randomWord when true\n    const incorrectLetters = useSelector(storeState => storeState.incorrectLetters);\n    const [inputLetters, setInputLetters] = React.useState(''); //displays the randomWord as _\n    const [enteredLetter, setEnteredLetter] = React.useState('');\n    const [errorMsg, setErrorMsg] = React.useState('');\n   \n\n    React.useEffect(() => {\n        if (randomWord === '') {\n            axios\n                .get(\n                    `https://cors-anywhere.herokuapp.com/https://api.datamuse.com/words`, {\n                        params: {\n                            ml: topic\n                        }\n                    }\n                )\n                .then(response => {\n                    //console.log(response.data)\n                    let filteredData = response.data.filter(datum => !datum.word.includes(topic));\n                    let min = 0;\n                    let max = filteredData.length - 1;\n                    let randomNumber = Math.round(Math.random() * (max - min) + min);\n                    let chosenRandomWord = filteredData[randomNumber].word;\n                    console.log('random word: ', chosenRandomWord);\n                    dispatch({ type: \"SET_RANDOM_WORD\", payload: chosenRandomWord });\n                    let wordArrayed = [];\n                    chosenRandomWord.split(\"\").forEach(letter => {\n                        wordArrayed.push('_ ');\n                    }); \n                    setInputLetters(wordArrayed);\n                });\n        } \n    }, [randomWord])\n\n\n    if (gameOver) {\n        return (\n            <div class=\"text-center\">\n                <h3>GAME OVER</h3>\n                <h2>'{randomWord}'</h2>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"App\">\n                <h2>{inputLetters}</h2>\n                <h4>Topic: {topic}</h4>\n                <br />\n                <label>Enter letter: </label>\n                <input \n                    type=\"text\" \n                    placeholder=\"e.g a\"\n                    onChange={(event) => {\n                        setEnteredLetter(event.target.value);\n                        setErrorMsg('');\n                    }}\n                    value={enteredLetter}\n                    required\n                />\n                <Button\n                    variant=\"outline-success\"\n                    onClick={() => {\n                        if (isValidInput(enteredLetter, inputLetters, incorrectLetters, setErrorMsg)) {\n                            console.log(enteredLetter, 'enteredLetter');\n                            console.log(isLetterCorrect(randomWord, enteredLetter), 'isLetterCorrect')\n                            if (isLetterCorrect(randomWord, enteredLetter)) {\n                                setInputLetters(showCorrectLetter(randomWord, enteredLetter, inputLetters));\n                            } else {\n                                dispatch({ type: \"ADD_INCORRECT_LETTER\", payload: enteredLetter });\n                                dispatch({ type: \"INCREMENT_INCORRECT_COUNTER\" });\n                            }\n                            if (inputLetters.join(\"\") === randomWord) {\n                                console.log('youve won!');\n                                dispatch({ type: \"TOGGLE_GAME_WON\", payload: true});\n                            }\n                        } else {\n                            console.log(errorMsg, 'errorMSG')\n                        }\n                        setEnteredLetter('');\n                    }}\n                >submit</Button>\n                <div>\n                    {\n                        (errorMsg !== '')\n                        ? <h4>{errorMsg}</h4>\n                        : null\n                    }\n                </div>\n            </div>\n        );\n    }               \n    \n}\n\n\nexport default Word;"]},"metadata":{},"sourceType":"module"}