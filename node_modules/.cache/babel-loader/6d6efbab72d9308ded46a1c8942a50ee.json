{"ast":null,"code":"import _defineProperty from \"/Users/syedasultana/Desktop/FunProjects/hangman-game/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const initialState = {\n  generatedPrompt: generatePrompt(),\n  inputs: [],\n  score: 0,\n  totalScores: JSON.parse(localStorage.getItem('totalScores')) || []\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SET_PROMPT\":\n      return {\n        generatedPrompt: state.generatedPrompt\n      };\n\n    case \"ADD_TO_INPUTS\":\n      return _objectSpread({}, state, {\n        inputs: [...state.inputs, action.payload]\n      });\n\n    case \"INCREMENT_SCORE\":\n      return _objectSpread({}, state, {\n        score: state.score + action.payload\n      });\n\n    case \"ADD_ON_SCORE\":\n      console.log('adding', action.payload, 'to totalScores');\n      const totalScores = [...state.totalScores, action.payload || []];\n      localStorage.setItem(\"totalScores\", JSON.stringify(totalScores));\n      return _objectSpread({}, state, {\n        totalScores\n      });\n\n    default:\n      return state;\n  }\n};\nexport const addToInputs = word => {\n  return {\n    type: \"ADD_TO_INPUTS\",\n    payload: word\n  };\n};\nexport const incrementScore = score => {\n  return {\n    type: \"INCREMENT_SCORE\",\n    payload: score\n  };\n};\nexport const addToTotalScores = newScore => {\n  return {\n    type: \"ADD_ON_SCORE\",\n    payload: newScore\n  };\n};","map":{"version":3,"sources":["/Users/syedasultana/Desktop/FunProjects/hangman-game/src/redux.js"],"names":["initialState","generatedPrompt","generatePrompt","inputs","score","totalScores","JSON","parse","localStorage","getItem","reducer","state","action","type","payload","console","log","setItem","stringify","addToInputs","word","incrementScore","addToTotalScores","newScore"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,eAAe,EAAEC,cAAc,EADP;AAExBC,EAAAA,MAAM,EAAE,EAFgB;AAGxBC,EAAAA,KAAK,EAAE,CAHiB;AAIxBC,EAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,KAAmD;AAJxC,CAArB;AAOP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,YAAL;AACI,aAAO;AACHZ,QAAAA,eAAe,EAAEU,KAAK,CAACV;AADpB,OAAP;;AAGJ,SAAK,eAAL;AACI,+BACOU,KADP;AAEIR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACE,OAAzB;AAFZ;;AAIJ,SAAK,iBAAL;AACI,+BACOH,KADP;AAEIP,QAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,GAAcQ,MAAM,CAACE;AAFhC;;AAIJ,SAAK,cAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,MAAM,CAACE,OAA7B,EAAsC,gBAAtC;AACA,YAAMT,WAAW,GAAG,CAAC,GAAGM,KAAK,CAACN,WAAV,EAAuBO,MAAM,CAACE,OAAP,IAAkB,EAAzC,CAApB;AACAN,MAAAA,YAAY,CAACS,OAAb,CAAqB,aAArB,EAAoCX,IAAI,CAACY,SAAL,CAAeb,WAAf,CAApC;AACA,+BACOM,KADP;AAEIN,QAAAA;AAFJ;;AAIJ;AACI,aAAOM,KAAP;AAxBR;AA0BD,CA3BI;AA+BL,OAAO,MAAMQ,WAAW,GAAGC,IAAI,IAAI;AACjC,SAAO;AACLP,IAAAA,IAAI,EAAE,eADD;AAELC,IAAAA,OAAO,EAAEM;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,cAAc,GAAGjB,KAAK,IAAI;AACrC,SAAO;AACLS,IAAAA,IAAI,EAAE,iBADD;AAELC,IAAAA,OAAO,EAAEV;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMkB,gBAAgB,GAAGC,QAAQ,IAAI;AAC1C,SAAO;AACLV,IAAAA,IAAI,EAAE,cADD;AAELC,IAAAA,OAAO,EAAES;AAFJ,GAAP;AAID,CALM","sourcesContent":["export const initialState = {\n    generatedPrompt: generatePrompt(),\n    inputs: [],\n    score: 0,\n    totalScores: JSON.parse(localStorage.getItem('totalScores')) || []\n};\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"SET_PROMPT\":\n            return {\n                generatedPrompt: state.generatedPrompt \n            };\n        case \"ADD_TO_INPUTS\":\n            return {\n                ...state,\n                inputs: [...state.inputs, action.payload]\n            };\n        case \"INCREMENT_SCORE\":\n            return {\n                ...state,\n                score: state.score + action.payload \n            }\n        case \"ADD_ON_SCORE\":\n            console.log('adding', action.payload, 'to totalScores');\n            const totalScores = [...state.totalScores, action.payload || []]\n            localStorage.setItem(\"totalScores\", JSON.stringify(totalScores))\n            return {\n                ...state,\n                totalScores\n            }\n        default:\n            return state;\n    }\n  };\n  \n\n  \n  export const addToInputs = word => {\n    return {\n      type: \"ADD_TO_INPUTS\",\n      payload: word\n    };\n  };\n\n  export const incrementScore = score => {\n    return {\n      type: \"INCREMENT_SCORE\",\n      payload: score\n    };\n  };\n\n  export const addToTotalScores = newScore => {\n    return {\n      type: \"ADD_ON_SCORE\",\n      payload: newScore\n    };\n  };"]},"metadata":{},"sourceType":"module"}