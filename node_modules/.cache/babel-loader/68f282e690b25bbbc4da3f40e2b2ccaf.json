{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport function getClosestBody(el) {\n  if (!el) {\n    return null;\n  } else if (el.tagName === 'BODY') {\n    return el;\n  } else if (el.tagName === 'IFRAME') {\n    var document_1 = el.contentDocument;\n    return document_1 ? document_1.body : null;\n  } else if (!el.offsetParent) {\n    return null;\n  }\n\n  return getClosestBody(el.offsetParent);\n}\nvar bodies = new Map();\nvar doc = typeof document === 'object' ? document : undefined;\nexport default !doc ? function useLockBodyMock(_locked, _elementRef) {\n  if (_locked === void 0) {\n    _locked = true;\n  }\n} : function useLockBody(locked, elementRef) {\n  if (locked === void 0) {\n    locked = true;\n  }\n\n  elementRef = elementRef || useRef(doc.body);\n  useEffect(function () {\n    var body = getClosestBody(elementRef.current);\n\n    if (!body) {\n      return;\n    }\n\n    var bodyInfo = bodies.get(body);\n\n    if (locked) {\n      if (!bodyInfo) {\n        bodies.set(body, {\n          counter: 1,\n          initialOverflow: body.style.overflow\n        });\n        body.style.overflow = 'hidden';\n      } else {\n        bodies.set(body, {\n          counter: bodyInfo.counter + 1,\n          initialOverflow: bodyInfo.initialOverflow\n        });\n      }\n    } else {\n      if (bodyInfo) {\n        if (bodyInfo.counter === 1) {\n          bodies.delete(body);\n          body.style.overflow = bodyInfo.initialOverflow;\n        } else {\n          bodies.set(body, {\n            counter: bodyInfo.counter - 1,\n            initialOverflow: bodyInfo.initialOverflow\n          });\n        }\n      }\n    }\n  }, [locked, elementRef.current]);\n};","map":null,"metadata":{},"sourceType":"module"}