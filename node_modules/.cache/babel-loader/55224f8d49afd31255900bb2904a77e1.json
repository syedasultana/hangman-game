{"ast":null,"code":"import _slicedToArray from \"/Users/syedasultana/Desktop/FunProjects/hangman-game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/syedasultana/Desktop/FunProjects/hangman-game/src/components/Word.js\";\nimport React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nconst words = ['apple', 'pear', 'banana', 'passionfruit', 'pumpkin', 'brocolli', 'mango', 'orange'];\n\nfunction Word() {\n  const dispatch = useDispatch();\n  const randomWord = useSelector(storeState => storeState.randomWord);\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        inputLetters = _React$useState2[0],\n        setInputLetters = _React$useState2[1]; //displays the randomWord as _\n\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        enteredLetter = _React$useState4[0],\n        setEnteredLetter = _React$useState4[1];\n\n  React.useEffect(() => {\n    if (randomWord === '') {\n      let min = 0;\n      let max = 7;\n      let randomNumber = Math.round(Math.random() * (max - min) + min);\n      let chosenRandomWord = words[randomNumber];\n      console.log('random word: ', chosenRandomWord);\n      dispatch({\n        type: \"SET_RANDOM_WORD\",\n        payload: chosenRandomWord\n      });\n      let wordArrayed = [];\n      chosenRandomWord.split(\"\").forEach(letter => {\n        wordArrayed.push('_ ');\n      }); //console.log(wordArrayed, 'wordArrayed');\n\n      setInputLetters(wordArrayed);\n    }\n  }, [randomWord]);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, inputLetters), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Enter letter: \"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"e.g a\",\n    onChange: event => {\n      setEnteredLetter(event.target.value);\n    },\n    value: enteredLetter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => {\n      console.log(enteredLetter, 'enteredLetter');\n      console.log(isLetterCorrect(randomWord, enteredLetter), 'isLetterCorrect');\n\n      if (isLetterCorrect(randomWord, enteredLetter)) {\n        //change inputLetters where necessary\n        setInputLetters(inputLetters, enteredLetter); //setInputLetters(showCorrectLetter(inputLetters, enteredLetter))\n      } else {\n        dispatch({\n          type: \"ADD_INCORRECT_LETTER\",\n          payload: enteredLetter\n        });\n      }\n\n      setEnteredLetter('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"submit\"));\n}\n\nfunction isLetterCorrect(word, letter) {\n  if (word.includes(letter)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction showCorrectLetter(inputLetters, letter) {\n  const numberOfTimesLetterOccurs = inputLetters.filter(v => v === letter).length;\n  console.log('number of times the letter occurs', numberOfTimesLetterOccurs);\n}\n\nexport default Word;","map":{"version":3,"sources":["/Users/syedasultana/Desktop/FunProjects/hangman-game/src/components/Word.js"],"names":["React","useDispatch","useSelector","words","Word","dispatch","randomWord","storeState","useState","inputLetters","setInputLetters","enteredLetter","setEnteredLetter","useEffect","min","max","randomNumber","Math","round","random","chosenRandomWord","console","log","type","payload","wordArrayed","split","forEach","letter","push","event","target","value","isLetterCorrect","word","includes","showCorrectLetter","numberOfTimesLetterOccurs","filter","v","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst words = [\n    'apple',\n    'pear',\n    'banana',\n    'passionfruit',\n    'pumpkin',\n    'brocolli',\n    'mango',\n    'orange'\n]\n\nfunction Word() {\n    const dispatch = useDispatch();\n    const randomWord = useSelector(storeState => storeState.randomWord);\n    const [inputLetters, setInputLetters] = React.useState(''); //displays the randomWord as _\n    const [enteredLetter, setEnteredLetter] = React.useState('');\n   \n    React.useEffect(() => {\n        if (randomWord === '') {\n            let min = 0;\n            let max = 7;\n            let randomNumber = Math.round(Math.random() * (max - min) + min);\n            let chosenRandomWord = words[randomNumber];\n            console.log('random word: ', chosenRandomWord);\n            dispatch({ type: \"SET_RANDOM_WORD\", payload: chosenRandomWord });\n            let wordArrayed = [];\n            chosenRandomWord.split(\"\").forEach(letter => {\n                wordArrayed.push('_ ');\n            }); \n            //console.log(wordArrayed, 'wordArrayed');\n            setInputLetters(wordArrayed);\n        } \n    }, [randomWord])\n\n    return (\n        <div className=\"App\">\n            <p>{inputLetters}</p>\n            <br />\n            <label>Enter letter: </label>\n            <input \n                type=\"text\" \n                placeholder=\"e.g a\"\n                onChange={(event) => {\n                    setEnteredLetter(event.target.value)\n                }}\n                value={enteredLetter}\n            />\n            <button\n                onClick={() => {\n                    console.log(enteredLetter, 'enteredLetter');\n                    console.log(isLetterCorrect(randomWord, enteredLetter), 'isLetterCorrect')\n                    if (isLetterCorrect(randomWord, enteredLetter)) {\n                        //change inputLetters where necessary\n                        setInputLetters(inputLetters, enteredLetter);\n                        //setInputLetters(showCorrectLetter(inputLetters, enteredLetter))\n                    } else {\n                        dispatch({ type: \"ADD_INCORRECT_LETTER\", payload: enteredLetter });\n                    }\n                    setEnteredLetter('');\n                }}\n            >submit</button>\n        </div>\n    );\n}\n\nfunction isLetterCorrect(word, letter) {\n    if (word.includes(letter)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction showCorrectLetter(inputLetters, letter) {\n    const numberOfTimesLetterOccurs = inputLetters.filter((v) => (v === letter)).length;\n    console.log('number of times the letter occurs', numberOfTimesLetterOccurs)\n}\n\nexport default Word;"]},"metadata":{},"sourceType":"module"}