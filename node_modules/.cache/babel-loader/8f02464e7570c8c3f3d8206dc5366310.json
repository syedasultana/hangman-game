{"ast":null,"code":"import _slicedToArray from \"/Users/syedasultana/Desktop/FunProjects/hangman-game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/syedasultana/Desktop/FunProjects/hangman-game/src/components/Word.js\";\nimport React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nconst words = ['apple', 'pear', 'banana', 'passionfruit', 'pumpkin', 'brocolli', 'mango', 'orange'];\n\nfunction Word() {\n  const dispatch = useDispatch();\n  const randomWord = useSelector(storeState => storeState.randomWord);\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        inputLetters = _React$useState2[0],\n        setInputLetters = _React$useState2[1]; //displays the randomWord as _\n\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        enteredLetter = _React$useState4[0],\n        setEnteredLetter = _React$useState4[1];\n\n  const gameOver = useSelector(storeState => storeState.gameOver); //use ternary to display randomWord when true\n\n  React.useEffect(() => {\n    if (randomWord === '') {\n      let min = 0;\n      let max = 7;\n      let randomNumber = Math.round(Math.random() * (max - min) + min);\n      let chosenRandomWord = words[randomNumber];\n      console.log('random word: ', chosenRandomWord);\n      dispatch({\n        type: \"SET_RANDOM_WORD\",\n        payload: chosenRandomWord\n      });\n      let wordArrayed = [];\n      chosenRandomWord.split(\"\").forEach(letter => {\n        wordArrayed.push('_ ');\n      });\n      setInputLetters(wordArrayed);\n    }\n  }, [randomWord]);\n\n  if (gameOver) {\n    return React.createElement(\"div\", {\n      class: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"GAME OVER\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"'\", randomWord, \"'\"));\n  } else {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, inputLetters), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Enter letter: \"), React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"e.g a\",\n      onChange: event => {\n        setEnteredLetter(event.target.value);\n      },\n      value: enteredLetter,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        console.log(enteredLetter, 'enteredLetter');\n        console.log(isLetterCorrect(randomWord, enteredLetter), 'isLetterCorrect');\n\n        if (isLetterCorrect(randomWord, enteredLetter)) {\n          setInputLetters(showCorrectLetter(randomWord, enteredLetter, inputLetters));\n        } else {\n          dispatch({\n            type: \"ADD_INCORRECT_LETTER\",\n            payload: enteredLetter\n          });\n          dispatch({\n            type: \"INCREMENT_INCORRECT_COUNTER\"\n          });\n        } //console.log(inputLetters.join(\"\"), 'inputletters as string')\n\n\n        if (inputLetters.join(\"\") === randomWord) {\n          console.log('youve won!');\n          dispatch({\n            type: \"TOGGLE_GAME_WON\",\n            payload: true\n          });\n        }\n\n        setEnteredLetter('');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"submit\"));\n  }\n}\n\nfunction isLetterCorrect(word, letter) {\n  if (word.includes(letter)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction showCorrectLetter(word, letter, showingWord) {\n  let indexes = getAllIndexes(word.split(\"\"), letter);\n  indexes.map(index => {\n    showingWord[index] = letter;\n  }); //console.log(showingWord, 'inputLetters now');\n\n  return showingWord;\n}\n\nfunction getAllIndexes(arr, val) {\n  var indexes = [],\n      i;\n\n  for (i = 0; i < arr.length; i++) if (arr[i] === val) indexes.push(i);\n\n  return indexes;\n}\n\nexport default Word;","map":{"version":3,"sources":["/Users/syedasultana/Desktop/FunProjects/hangman-game/src/components/Word.js"],"names":["React","useDispatch","useSelector","words","Word","dispatch","randomWord","storeState","useState","inputLetters","setInputLetters","enteredLetter","setEnteredLetter","gameOver","useEffect","min","max","randomNumber","Math","round","random","chosenRandomWord","console","log","type","payload","wordArrayed","split","forEach","letter","push","event","target","value","isLetterCorrect","showCorrectLetter","join","word","includes","showingWord","indexes","getAllIndexes","map","index","arr","val","i","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst words = [\n    'apple',\n    'pear',\n    'banana',\n    'passionfruit',\n    'pumpkin',\n    'brocolli',\n    'mango',\n    'orange'\n]\n\nfunction Word() {\n    const dispatch = useDispatch();\n    const randomWord = useSelector(storeState => storeState.randomWord);\n    const [inputLetters, setInputLetters] = React.useState(''); //displays the randomWord as _\n    const [enteredLetter, setEnteredLetter] = React.useState('');\n    const gameOver = useSelector(storeState => storeState.gameOver); //use ternary to display randomWord when true\n   \n    React.useEffect(() => {\n        if (randomWord === '') {\n            let min = 0;\n            let max = 7;\n            let randomNumber = Math.round(Math.random() * (max - min) + min);\n            let chosenRandomWord = words[randomNumber];\n            console.log('random word: ', chosenRandomWord);\n            dispatch({ type: \"SET_RANDOM_WORD\", payload: chosenRandomWord });\n            let wordArrayed = [];\n            chosenRandomWord.split(\"\").forEach(letter => {\n                wordArrayed.push('_ ');\n            }); \n            setInputLetters(wordArrayed);\n        } \n    }, [randomWord])\n\n    if (gameOver) {\n        return (\n            <div class=\"text-center\">\n                <h3>GAME OVER</h3>\n                <h2>'{randomWord}'</h2>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"App\">\n                <h2>{inputLetters}</h2>\n                <br />\n                <label>Enter letter: </label>\n                <input \n                    type=\"text\" \n                    placeholder=\"e.g a\"\n                    onChange={(event) => {\n                        setEnteredLetter(event.target.value)\n                    }}\n                    value={enteredLetter}\n                    required\n                />\n                <button\n                    onClick={() => {\n                        console.log(enteredLetter, 'enteredLetter');\n                        console.log(isLetterCorrect(randomWord, enteredLetter), 'isLetterCorrect')\n                        if (isLetterCorrect(randomWord, enteredLetter)) {\n                            setInputLetters(showCorrectLetter(randomWord, enteredLetter, inputLetters));\n                        } else {\n                            dispatch({ type: \"ADD_INCORRECT_LETTER\", payload: enteredLetter });\n                            dispatch({ type: \"INCREMENT_INCORRECT_COUNTER\" });\n                        }\n                        //console.log(inputLetters.join(\"\"), 'inputletters as string')\n                        if (inputLetters.join(\"\") === randomWord) {\n                            console.log('youve won!');\n                            dispatch({ type: \"TOGGLE_GAME_WON\", payload: true});\n                        }\n                        setEnteredLetter('');\n                    }}\n                >submit</button>\n            </div>\n        );\n    }               \n    \n}\n\nfunction isLetterCorrect(word, letter) {\n    if (word.includes(letter)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction showCorrectLetter(word, letter, showingWord) {\n    let indexes = getAllIndexes(word.split(\"\"), letter);\n    indexes.map(index => {\n        showingWord[index] = letter\n    })\n    //console.log(showingWord, 'inputLetters now');\n    return showingWord;\n}\n\nfunction getAllIndexes(arr, val) {\n    var indexes = [], i;\n    for(i = 0; i < arr.length; i++)\n        if (arr[i] === val)\n            indexes.push(i);\n    return indexes;\n}\n\nexport default Word;"]},"metadata":{},"sourceType":"module"}