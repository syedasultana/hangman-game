{"ast":null,"code":"import _slicedToArray from \"/Users/syedasultana/Desktop/FunProjects/hangman-game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/syedasultana/Desktop/FunProjects/hangman-game/src/components/Word.js\";\nimport React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\"; //import axios from \"axios\";\n\nimport Button from 'react-bootstrap/Button';\nconst words = ['apple', 'pear', 'banana', 'passionfruit', 'pumpkin', 'brocolli', 'mango', 'orange'];\n\nfunction Word({\n  topic\n}) {\n  const dispatch = useDispatch();\n  const randomWord = useSelector(storeState => storeState.randomWord);\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        inputLetters = _React$useState2[0],\n        setInputLetters = _React$useState2[1]; //displays the randomWord as _\n\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        enteredLetter = _React$useState4[0],\n        setEnteredLetter = _React$useState4[1];\n\n  const gameOver = useSelector(storeState => storeState.gameOver); //use ternary to display randomWord when true\n\n  const incorrectLetters = useSelector(storeState => storeState.incorrectLetters);\n\n  const _React$useState5 = React.useState(''),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        errorMsg = _React$useState6[0],\n        setErrorMsg = _React$useState6[1]; // React.useEffect(() => {\n  //     if (randomWord === '') {\n  //         let min = 0;\n  //         let max = 7;\n  //         let randomNumber = Math.round(Math.random() * (max - min) + min);\n  //         let chosenRandomWord = words[randomNumber];\n  //         console.log('random word: ', chosenRandomWord);\n  //         dispatch({ type: \"SET_RANDOM_WORD\", payload: chosenRandomWord });\n  //         let wordArrayed = [];\n  //         chosenRandomWord.split(\"\").forEach(letter => {\n  //             wordArrayed.push('_ ');\n  //         }); \n  //         setInputLetters(wordArrayed);\n  //     } \n  // }, [randomWord])\n\n\n  React.useEffect(() => {\n    if (randomWord === '') {\n      console.log('random word: ', chosenRandomWord);\n      dispatch({\n        type: \"SET_RANDOM_WORD\",\n        payload: chosenRandomWord\n      });\n      let wordArrayed = [];\n      chosenRandomWord.split(\"\").forEach(letter => {\n        wordArrayed.push('_ ');\n      });\n      setInputLetters(wordArrayed);\n    }\n  }, [randomWord]);\n\n  if (gameOver) {\n    return React.createElement(\"div\", {\n      class: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"GAME OVER\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"'\", randomWord, \"'\"));\n  } else {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, inputLetters), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Enter letter: \"), React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"e.g a\",\n      onChange: event => {\n        setEnteredLetter(event.target.value);\n      },\n      value: enteredLetter,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"outline-success\",\n      onClick: () => {\n        //check if valid then do all these things else display error message\n        if (isValidInput(enteredLetter, inputLetters, incorrectLetters, setErrorMsg)) {\n          console.log(enteredLetter, 'enteredLetter');\n          console.log(isLetterCorrect(randomWord, enteredLetter), 'isLetterCorrect');\n\n          if (isLetterCorrect(randomWord, enteredLetter)) {\n            setInputLetters(showCorrectLetter(randomWord, enteredLetter, inputLetters));\n          } else {\n            dispatch({\n              type: \"ADD_INCORRECT_LETTER\",\n              payload: enteredLetter\n            });\n            dispatch({\n              type: \"INCREMENT_INCORRECT_COUNTER\"\n            });\n          } //console.log(inputLetters.join(\"\"), 'inputletters as string')\n\n\n          if (inputLetters.join(\"\") === randomWord) {\n            console.log('youve won!');\n            dispatch({\n              type: \"TOGGLE_GAME_WON\",\n              payload: true\n            });\n          }\n        } else {\n          console.log(errorMsg, 'errorMSG');\n        }\n\n        setEnteredLetter('');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"submit\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, errorMsg !== '' ? React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, errorMsg) : null));\n  }\n}\n\nfunction isValidInput(input, alreadyInputtedCorrect, alreadyInputtedIncorrect, setErrorMsg) {\n  //console.log(typeof input, 'typeof input')\n  //console.log(isNaN(parseInt(input)), 'evaluating if number')\n  // if (typeof input !== 'string') {\n  //     //setErrorMsg('Please enter a letter');\n  //     return false;\n\n  /*} else */\n  if (input.length > 1) {\n    setErrorMsg('Please enter a single letter🧐');\n    return false;\n  } else if (alreadyInputtedCorrect.includes(input)) {\n    setErrorMsg('You have already entered this letter😅');\n    return false;\n  } else if (alreadyInputtedIncorrect.includes(input)) {\n    setErrorMsg('You have already entered this letter😅');\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction isLetterCorrect(word, letter) {\n  if (word.includes(letter)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction showCorrectLetter(word, letter, showingWord) {\n  let indexes = getAllIndexes(word.split(\"\"), letter);\n  indexes.map(index => {\n    showingWord[index] = letter;\n  }); //console.log(showingWord, 'inputLetters now');\n\n  return showingWord;\n}\n\nfunction getAllIndexes(arr, val) {\n  var indexes = [],\n      i;\n\n  for (i = 0; i < arr.length; i++) if (arr[i] === val) indexes.push(i);\n\n  return indexes;\n}\n\nexport default Word;","map":{"version":3,"sources":["/Users/syedasultana/Desktop/FunProjects/hangman-game/src/components/Word.js"],"names":["React","useDispatch","useSelector","Button","words","Word","topic","dispatch","randomWord","storeState","useState","inputLetters","setInputLetters","enteredLetter","setEnteredLetter","gameOver","incorrectLetters","errorMsg","setErrorMsg","useEffect","console","log","chosenRandomWord","type","payload","wordArrayed","split","forEach","letter","push","event","target","value","isValidInput","isLetterCorrect","showCorrectLetter","join","input","alreadyInputtedCorrect","alreadyInputtedIncorrect","length","includes","word","showingWord","indexes","getAllIndexes","map","index","arr","val","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\n//import axios from \"axios\";\nimport Button from 'react-bootstrap/Button';\n\nconst words = [\n    'apple',\n    'pear',\n    'banana',\n    'passionfruit',\n    'pumpkin',\n    'brocolli',\n    'mango',\n    'orange'\n]\n\nfunction Word({ topic }) {\n    const dispatch = useDispatch();\n    const randomWord = useSelector(storeState => storeState.randomWord);\n    const [inputLetters, setInputLetters] = React.useState(''); //displays the randomWord as _\n    const [enteredLetter, setEnteredLetter] = React.useState('');\n    const gameOver = useSelector(storeState => storeState.gameOver); //use ternary to display randomWord when true\n    const incorrectLetters = useSelector(storeState => storeState.incorrectLetters);\n    const [errorMsg, setErrorMsg] = React.useState('');\n   \n    // React.useEffect(() => {\n    //     if (randomWord === '') {\n    //         let min = 0;\n    //         let max = 7;\n    //         let randomNumber = Math.round(Math.random() * (max - min) + min);\n    //         let chosenRandomWord = words[randomNumber];\n    //         console.log('random word: ', chosenRandomWord);\n    //         dispatch({ type: \"SET_RANDOM_WORD\", payload: chosenRandomWord });\n    //         let wordArrayed = [];\n    //         chosenRandomWord.split(\"\").forEach(letter => {\n    //             wordArrayed.push('_ ');\n    //         }); \n    //         setInputLetters(wordArrayed);\n    //     } \n    // }, [randomWord])\n\n    React.useEffect(() => {\n        if (randomWord === '') {\n            \n            console.log('random word: ', chosenRandomWord);\n            dispatch({ type: \"SET_RANDOM_WORD\", payload: chosenRandomWord });\n            let wordArrayed = [];\n            chosenRandomWord.split(\"\").forEach(letter => {\n                wordArrayed.push('_ ');\n            }); \n            setInputLetters(wordArrayed);\n        } \n    }, [randomWord])\n\n    if (gameOver) {\n        return (\n            <div class=\"text-center\">\n                <h3>GAME OVER</h3>\n                <h2>'{randomWord}'</h2>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"App\">\n                <h2>{inputLetters}</h2>\n                <br />\n                <label>Enter letter: </label>\n                <input \n                    type=\"text\" \n                    placeholder=\"e.g a\"\n                    onChange={(event) => {\n                        setEnteredLetter(event.target.value)\n                    }}\n                    value={enteredLetter}\n                    required\n                />\n                <Button\n                    variant=\"outline-success\"\n                    onClick={() => {\n                        //check if valid then do all these things else display error message\n                        if (isValidInput(enteredLetter, inputLetters, incorrectLetters, setErrorMsg)) {\n                            console.log(enteredLetter, 'enteredLetter');\n                            console.log(isLetterCorrect(randomWord, enteredLetter), 'isLetterCorrect')\n                            if (isLetterCorrect(randomWord, enteredLetter)) {\n                                setInputLetters(showCorrectLetter(randomWord, enteredLetter, inputLetters));\n                            } else {\n                                dispatch({ type: \"ADD_INCORRECT_LETTER\", payload: enteredLetter });\n                                dispatch({ type: \"INCREMENT_INCORRECT_COUNTER\" });\n                            }\n                            //console.log(inputLetters.join(\"\"), 'inputletters as string')\n                            if (inputLetters.join(\"\") === randomWord) {\n                                console.log('youve won!');\n                                dispatch({ type: \"TOGGLE_GAME_WON\", payload: true});\n                            }\n                        } else {\n                            console.log(errorMsg, 'errorMSG')\n                        }\n                        setEnteredLetter('');\n                    }}\n                >submit</Button>\n                <div>\n                    {\n                        (errorMsg !== '')\n                        ? <h4>{errorMsg}</h4>\n                        : null\n                    }\n                </div>\n            </div>\n        );\n    }               \n    \n}\n\nfunction isValidInput(input, alreadyInputtedCorrect, alreadyInputtedIncorrect, setErrorMsg) {\n    //console.log(typeof input, 'typeof input')\n    //console.log(isNaN(parseInt(input)), 'evaluating if number')\n    // if (typeof input !== 'string') {\n    //     //setErrorMsg('Please enter a letter');\n    //     return false;\n    /*} else */if (input.length > 1) {\n        setErrorMsg('Please enter a single letter🧐');\n        return false;\n    } else if (alreadyInputtedCorrect.includes(input)) {\n        setErrorMsg('You have already entered this letter😅');\n        return false;\n    } else if (alreadyInputtedIncorrect.includes(input)) {\n        setErrorMsg('You have already entered this letter😅');\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfunction isLetterCorrect(word, letter) {\n    if (word.includes(letter)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction showCorrectLetter(word, letter, showingWord) {\n    let indexes = getAllIndexes(word.split(\"\"), letter);\n    indexes.map(index => {\n        showingWord[index] = letter\n    })\n    //console.log(showingWord, 'inputLetters now');\n    return showingWord;\n}\n\nfunction getAllIndexes(arr, val) {\n    var indexes = [], i;\n    for(i = 0; i < arr.length; i++)\n        if (arr[i] === val)\n            indexes.push(i);\n    return indexes;\n}\n\nexport default Word;"]},"metadata":{},"sourceType":"module"}